#include <iostream>

using namespace std;

class Stack{
private:
    struct Node{
        int data;
        Node *link;
    };
public:
    Node* top = NULL;

    void push(int value){
        Node *newNode = new Node();
        newNode->data = value;
        newNode->link = top;
        top = newNode;
    }

    void pop(){
        if(top == NULL){
            cout << "Stack Underflow" << endl;
        }
        else{
            top = top->link;
        }
    }

    void display(){
        struct Node *ptr;
        if(top == NULL){
            cout << "Stack is empty" << endl;
        }
        else{
            ptr = top;
            while(ptr != NULL){
                cout << ptr->data << " ";
                ptr = ptr->link;
            }
        }
    }

    void deleteAll(){
        top = NULL;
        cout << "The stack is now empty." << endl << endl;
    }
};

class Queue{
private:
    struct Node{
        int data;
        Node *link;
    };
public:
    Node *backNode = NULL;
    Node *frontNode = NULL;

    void enqueue(int value){
        Node *temp = new Node;
        temp->data = value;
        temp->link = NULL;

        if(frontNode == NULL){
            frontNode = backNode = temp;
        }
        else{
            backNode->link = temp;
            backNode = temp;
        }
    }

    void dequeue(){
        if(frontNode == NULL){
            cout << "The queue is empty" << endl;
        }
        else{
            frontNode = frontNode->link;
        }
    }

    void insertAtLocation(int value, int location){
        Node *ptr;
        Node *next;
        Node *temp;
        int index = 0;

        ptr = temp = frontNode;
        next = frontNode->link;
        while(ptr->link != NULL){
            if(index == location){
                ptr->data = value;
                ptr->link = next;
            }
            else{
                temp = ptr;
                ptr = ptr->link;
                temp->link = ptr;
                index++;
            }
        }
    }

    void display(){
        Node *ptr;
        if(frontNode == NULL){
            cout << "The queue is empty" << endl;
        }
        else{
            ptr = frontNode;
            while(ptr != NULL){
                cout << ptr->data << " ";
                ptr = ptr->link;
            }
        }
    }

    int findMax(){
        Node *ptr;
        int maxValue = frontNode->data;

        ptr = frontNode;
        while(ptr != NULL){
            if(ptr->data > maxValue)
                maxValue = ptr->data;
                ptr = ptr->link;
        }
        return maxValue;
    }

    int findMin(){
        Node *ptr;
        int minValue = frontNode->data;

        ptr = frontNode;
        while(ptr != NULL){
            if(ptr->data < minValue)
                minValue = ptr->data;
                ptr = ptr->link;
        }
        return minValue;
    }

    int findAverage(){
        Node *ptr;
        int numNodes = 0;
        int sum = 0;
        int average;

        ptr = frontNode;
        while(ptr != NULL){
            sum += ptr->data;
            numNodes++;
            ptr = ptr->link;
        }
        average = sum / numNodes;
    }

    void deleteAll(){
        frontNode = backNode = NULL;
        cout << "The queue is now empty." << endl << endl;
    }
};


int main()
{
    Stack thisStack;
    Queue thisQueue;
    char choice;
    bool valid = false;
    do{
        cout << "A. Insert new element in the Stack (LIFO)." << endl;
        cout << "B. Remove an element from the stack (LIFO)." << endl;
        cout << "C. Insert new element in the queue (FIFO)." << endl;
        cout << "D. Insert an element at specific location in the queue."
             << endl;
        cout << "E. Remove an element from the queue (FIFO)." << endl;
        cout << "F. Remove a specific element from the queue." << endl;
        cout << "G. Find Min element in the queue, Max element in the" << endl;
        cout << "   queue, and the Average of the queue." << endl;
        cout << "H. Delete the entire stack." << endl;
        cout << "I. Delete the entire queue." << endl;
        cout << "X. Exit the program." << endl << endl;

        cin >> choice;

        if(choice == 'A'){
            valid = true;
            int value;

            cout << "Enter the value to be added to the stack: ";
            cin >> value;
            cout << endl;

            thisStack.push(value);
            thisStack.display();
            cout << endl << endl;
        }

        else if(choice == 'B'){
            valid = true;

            thisStack.pop();
            thisStack.display();
            cout << endl << endl;
        }

        if(choice == 'C'){
            valid = true;
            int value;

            cout << "Enter the value to be added to the queue: ";
            cin >> value;
            cout << endl;

            thisQueue.enqueue(value);
            thisQueue.display();
            cout << endl << endl;
        }

        else if(choice == 'D'){
            valid = true;
            int value;
            int position;

            cout << "Enter the value to be entered : ";
            cin >> value;
            cout << "\nEnter the position of the new value: ";
            cin >> position;

            thisQueue.insertAtLocation(value, position);
            thisQueue.display();
        }

        else if(choice == 'E'){
            valid = true;

            thisQueue.dequeue();
            thisQueue.display();
            cout << endl << endl;
        }

        else if(choice == 'G'){
            valid == true;
            int maximum = thisQueue.findMax();
            int minimum = thisQueue.findMin();
            int average = thisQueue.findAverage();

            cout << "Max: " << maximum << endl;
            cout << "Min: " << minimum << endl;
            cout << "Average: " << average << endl << endl;
        }

        else if(choice == 'H'){
            thisStack.deleteAll();
        }

        else if(choice == 'X'){
            exit(0);
        }

        else if(valid == false){
            cout << "Error: Invalid input. Input must be uppercase character"
                 << endl << endl;
        }
    }while(valid == false || choice != 'X');
}